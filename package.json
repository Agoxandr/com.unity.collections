{
  "name": "com.unity.collections",
  "displayName": "Collections",
  "version": "2.1.0-pre.11",
  "unity": "2022.2",
  "unityRelease": "2f1",
  "dependencies": {
    "com.unity.burst": "1.8.2",
    "com.unity.modules.unityanalytics": "1.0.0",
    "com.unity.nuget.mono-cecil": "1.11.4",
    "com.unity.test-framework": "1.3.2"
  },
  "description": "A C# collections library providing data structures that can be used in jobs, and optimized by Burst compiler.",
  "keywords": [
    "dots",
    "collections",
    "unity"
  ],
  "_upm": {
    "changelog": "### Added\n\n* Ability to resize `Unsafe/NativeBitArray` with `Resize`, `SetCapacity`, `TrimExcess` methods.\n* `.Substring` method to `FixedStringN`, and `NativeText`.\n* `NativeRingQueue`.\n* `CollectionHelper.Dispose` to dispose a NativeArray without Allocator input parameter.\n\n### Changed\n\n* Reviewed all safety checks and made many of them supported with `UNITY_DOTS_DEBUG` in addition to `ENABLE_UNITY_COLLECTIONS_CHECKS`\n* Optimize `RewindableAllocator`.\n* Underlying algorithm for `*HashMap/Set` containters to improve performance.\n\n### Fixed\n\n* Code generation responsible for early initialization of JobReflectionData could previously emit enormous amounts of code that could dramatically increase IL2CPP build times. We now produce the minimal amount of code necessary and no longer impact IL2CPP compilation times.\n* Removed unnecessary test and documentation samples assemblies from always being loaded in projects.\n* `NativeHashSet.ToNativeArray(allocator)` now works with custom allocators"
  },
  "upmCi": {
    "footprint": "ab5f5e054909ec4f3897141988be9f9c51497cfe"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.collections@2.1/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
    "type": "git",
    "revision": "0e572178431e16c09c6c434c873bf0c60e52a5e9"
  }
}
